// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  name  String
  email String @unique

  sessions Session[]
}

model Dog {
  id             String    @id @default(uuid())
  name           String    @unique
  breed          String
  sex            String
  training_start DateTime
  birthday       DateTime?
  last_heat      DateTime?

  sessions Session[]
}

model Session {
  id              String    @id @default(uuid())
  trainer_id      String
  dog_id          String
  sample_set_id   String
  eeg_file_path   String?
  video_file_path String?
  notes           String?
  last_meal       Int
  start_time      DateTime
  end_time        DateTime?
  mode            String    @default("training")

  trainer    User      @relation(fields: [trainer_id], references: [id])
  dog        Dog       @relation(fields: [dog_id], references: [id])
  sample_set SampleSet @relation(fields: [sample_set_id], references: [id])
  runs       Run[]
}

model SampleSet {
  id              String   @id @default(uuid())
  date            String   @unique
  sample_ehr_uids String
  date_time       DateTime

  sessions Session[]
}

model Run {
  id                String    @id @default(uuid())
  session_id        String
  positive_stations String
  start_time        DateTime
  end_time          DateTime?

  sample_battery SampleBattery[]
  sniffs         Sniff[]
  session        Session         @relation(fields: [session_id], references: [id], onDelete: Cascade)
}

model Sniff {
  id                     String   @id @default(uuid())
  run_id                 String
  station                String
  is_positive_indication Boolean
  result                 String
  time                   DateTime

  run Run @relation(fields: [run_id], references: [id], onDelete: Cascade)
}

model SampleBattery {
  id             String @id @default(uuid())
  run_id         String
  station        String
  sample_ehr_uid String

  run Run @relation(fields: [run_id], references: [id], onDelete: Cascade)

  @@unique([run_id, station])
}
